import os

INPUTID="1G4i115FCH8XNyiEHCkBXMSO_9pwGflTq"

# scripts currently expect base directory as working directory
if os.path.basename(os.path.abspath(os.curdir)) == "workflow":
    os.chdir('..')

rule all:
    input: "output/upstreamKinaseResults.csv"

rule downloadInputs:
    output: directory("input")
    conda: "envs/download.yaml"
    log: "output/downloadInputs.log"
    shell:
        f"(gdown -O input.zip \"https://drive.google.com/uc?export=download&id={INPUTID}\""
        " && unzip input.zip) 2> {log}"

rule ProteinCellCycleClusters:
    input: "input/"
    output: "output/pickles/mockbulk_phases.npy"
    conda: "envs/enviro.yaml"
    log: "output/1_ProteinCellCycleClusters.log"
    shell: "python 1_ProteinCellCycleClusters.py &> {log}"

rule ProteinFucciPsuedotime:
    input: "output/pickles/mockbulk_phases.npy"
    output: "output/ProteinPseudotimePlotting.csv.gz"
    conda: "envs/enviro.yaml"
    log: "output/2_ProteinFucciPsuedotime.log"
    shell: "python 2_ProteinFucciPsuedotime.py &> {log}"

rule RNAFucciPseudotime:
    input: "output/ProteinPseudotimePlotting.csv.gz"
    output: "output/RNAPseudotimePlotting.csv.gz"
    conda: "envs/enviro.yaml"
    log: "output/3_RNAFucciPseudotime.log"
    shell: "python 3_RNAFucciPseudotime.py &> {log}"

rule TemporalDelay:
    input: "output/RNAPseudotimePlotting.csv.gz"
    output: "output/diff_max_pol.csv"
    conda: "envs/enviro.yaml"
    log: "output/4_TemporalDelay.log"
    shell: "python 4_TemporalDelay.py &> {log}"

rule ProteinProperties:
    input: "output/diff_max_pol.csv"
    output: "output/upstreamKinaseResults.csv"
    conda: "envs/enviro.yaml"
    log: "output/5_ProteinProperties.log"
    shell: "python 5_ProteinProperties.py &> {log}"
